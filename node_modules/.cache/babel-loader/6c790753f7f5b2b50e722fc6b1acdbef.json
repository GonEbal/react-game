{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/denis/Documents/UDACITY/react-game/src/components/LeaderBoard.js\";\nimport React, { Component } from 'react';\nimport { connect } from \"react-redux\";\nimport LeaderBoardUser from \"./LeaderBoardUser\";\n\nclass LeaderBoard extends Component {\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"leaderboard\",\n      children: this.props.users.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n        className: \"question\",\n        children: /*#__PURE__*/_jsxDEV(LeaderBoardUser, {\n          id: id\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 11,\n          columnNumber: 17\n        }, this)\n      }, id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 15\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 8,\n      columnNumber: 4\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  users\n}) {\n  console.log('SORTED', Object.keys(users).sort((a, b) => users[b].questions.length + users[b].answers.length - users[a].questions.length));\n  let sortable = [];\n\n  for (let user in users) {\n    sortable.push([user, users[user]]);\n  }\n\n  sortable.sort(function (a, b) {\n    return users[a].questions.length - users[b].questions.length;\n  });\n  console.log(sortable);\n  return {\n    users: Object.values(users).map(user => user.id)\n  };\n}\n\nexport default connect(mapStateToProps)(LeaderBoard);","map":{"version":3,"sources":["/Users/denis/Documents/UDACITY/react-game/src/components/LeaderBoard.js"],"names":["React","Component","connect","LeaderBoardUser","LeaderBoard","render","props","users","map","id","mapStateToProps","console","log","Object","keys","sort","a","b","questions","length","answers","sortable","user","push","values"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAOC,eAAP,MAA4B,mBAA5B;;AAEA,MAAMC,WAAN,SAA0BH,SAA1B,CAAoC;AACnCI,EAAAA,MAAM,GAAG;AACR,wBACC;AAAK,MAAA,SAAS,EAAC,aAAf;AAAA,gBACE,KAAKC,KAAL,CAAWC,KAAX,CAAiBC,GAAjB,CAAsBC,EAAD,iBACZ;AAAa,QAAA,SAAS,EAAC,UAAvB;AAAA,+BACE,QAAC,eAAD;AAAiB,UAAA,EAAE,EAAEA;AAArB;AAAA;AAAA;AAAA;AAAA;AADF,SAASA,EAAT;AAAA;AAAA;AAAA;AAAA,cADT;AADF;AAAA;AAAA;AAAA;AAAA,YADD;AASA;;AAXkC;;AAcpC,SAASC,eAAT,CAAyB;AAAEH,EAAAA;AAAF,CAAzB,EAAoC;AACnCI,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBC,MAAM,CAACC,IAAP,CAAYP,KAAZ,EAAmBQ,IAAnB,CAAwB,CAACC,CAAD,EAAGC,CAAH,KAAWV,KAAK,CAACU,CAAD,CAAL,CAASC,SAAT,CAAmBC,MAApB,GAA+BZ,KAAK,CAACU,CAAD,CAAL,CAASG,OAAT,CAAiBD,MAAjD,GAA6DZ,KAAK,CAACS,CAAD,CAAL,CAASE,SAAT,CAAmBC,MAAjH,CAAtB;AAEA,MAAIE,QAAQ,GAAG,EAAf;;AACA,OAAK,IAAIC,IAAT,IAAiBf,KAAjB,EAAwB;AACpBc,IAAAA,QAAQ,CAACE,IAAT,CAAc,CAACD,IAAD,EAAOf,KAAK,CAACe,IAAD,CAAZ,CAAd;AACH;;AAEDD,EAAAA,QAAQ,CAACN,IAAT,CAAc,UAASC,CAAT,EAAYC,CAAZ,EAAe;AACzB,WAAQV,KAAK,CAACS,CAAD,CAAL,CAASE,SAAT,CAAmBC,MAApB,GAA+BZ,KAAK,CAACU,CAAD,CAAL,CAASC,SAAT,CAAmBC,MAAzD;AACH,GAFD;AAIAR,EAAAA,OAAO,CAACC,GAAR,CAAYS,QAAZ;AACA,SAAO;AACNd,IAAAA,KAAK,EAAEM,MAAM,CAACW,MAAP,CAAcjB,KAAd,EAAqBC,GAArB,CAA0Bc,IAAD,IAAUA,IAAI,CAACb,EAAxC;AADD,GAAP;AAGA;;AAED,eAAeP,OAAO,CAACQ,eAAD,CAAP,CAAyBN,WAAzB,CAAf","sourcesContent":["import React, { Component } from 'react'\nimport { connect } from \"react-redux\"\nimport LeaderBoardUser from \"./LeaderBoardUser\"\n\nclass LeaderBoard extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div className='leaderboard'>\n\t\t\t\t{this.props.users.map((id) => (\n\t\t            <li key={id} className=\"question\">\n\t\t              <LeaderBoardUser id={id} />\n\t\t            </li>\n\t\t          ))}\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nfunction mapStateToProps({ users }) {\n\tconsole.log('SORTED', Object.keys(users).sort((a,b) => ((users[b].questions.length) + (users[b].answers.length)) - (users[a].questions.length)))\n\n\tlet sortable = [];\n\tfor (let user in users) {\n\t    sortable.push([user, users[user]]);\n\t}\n\n\tsortable.sort(function(a, b) {\n\t    return (users[a].questions.length) - (users[b].questions.length);\n\t})\n\n\tconsole.log(sortable)\n\treturn {\n\t\tusers: Object.values(users).map((user) => user.id)\n\t}\n}\n\nexport default connect(mapStateToProps)(LeaderBoard)"]},"metadata":{},"sourceType":"module"}