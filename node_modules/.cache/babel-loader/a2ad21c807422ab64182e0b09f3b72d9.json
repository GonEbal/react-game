{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/denis/Documents/UDACITY/react-game/src/components/Dashboard.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Question from \"./Question\";\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      show_answered: true\n    };\n\n    this.unanswered = () => {\n      const container = document.getElementById(\"container_list\");\n      container.classList.add(\"right-panel-active\");\n    };\n\n    this.answered = () => {\n      const container = document.getElementById(\"container_list\");\n      container.classList.remove(\"right-panel-active\");\n    };\n\n    this.change = () => {\n      this.setState(state => ({\n        state\n      }));\n      console.log('yes');\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container_body\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.change,\n        children: \"Change\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: this.state.show_answered ? 'block' : 'none'\n        },\n        children: this.props.answered_q.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"question\",\n          children: /*#__PURE__*/_jsxDEV(Question, {\n            id: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 37,\n            columnNumber: 15\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: !this.state.show_answered ? 'block' : 'none'\n        },\n        children: this.props.unanswered_q.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"question\",\n          children: /*#__PURE__*/_jsxDEV(Question, {\n            id: id\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 44,\n            columnNumber: 15\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 10\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  questions,\n  authedUser,\n  users\n}) {\n  const answered_questions = Object.values(questions).filter(valueName => valueName.optionOne.votes.includes(authedUser) || valueName.optionTwo.votes.includes(authedUser));\n  const unanswered_questions = Object.values(questions).filter(valueName => !valueName.optionOne.votes.includes(authedUser) && !valueName.optionTwo.votes.includes(authedUser));\n  return {\n    unanswered_q: Object.values(unanswered_questions).map(item => item.id),\n    answered_q: Object.values(answered_questions).map(item => item.id)\n  };\n}\n\nexport default connect(mapStateToProps)(Dashboard);","map":{"version":3,"sources":["/Users/denis/Documents/UDACITY/react-game/src/components/Dashboard.js"],"names":["React","Component","connect","Question","Dashboard","state","show_answered","unanswered","container","document","getElementById","classList","add","answered","remove","change","setState","console","log","render","display","props","answered_q","map","id","unanswered_q","mapStateToProps","questions","authedUser","users","answered_questions","Object","values","filter","valueName","optionOne","votes","includes","optionTwo","unanswered_questions","item"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport Question from \"./Question\"\n\nclass Dashboard extends Component {\n  state ={\n    show_answered: true,\n  }\n\n  unanswered = () => {\n    const container = document.getElementById(\"container_list\")\n    container.classList.add(\"right-panel-active\")\n  }\n  answered = () => {\n    const container = document.getElementById(\"container_list\")\n    container.classList.remove(\"right-panel-active\")\n  }\n\n  change = () => {\n    this.setState((state) => ({\n      state\n    }))\n    console.log('yes')\n  }\n\n  render() {\n    return (\n      <div className=\"container_body\">\n      <button\n      onClick={this.change}\n      >\n        Change\n      </button>\n        <div style={{display: this.state.show_answered ? 'block' : 'none' }}>\n          {this.props.answered_q.map((id) => (\n            <li key={id} className=\"question\">\n              <Question id={id} />\n            </li>\n          ))}\n        </div>\n         <div style={{display: !this.state.show_answered ? 'block' : 'none' }}>\n          {this.props.unanswered_q.map((id) => (\n            <li key={id} className=\"question\">\n              <Question id={id} />\n            </li>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps({ questions, authedUser, users }) {\n  const answered_questions = Object.values(questions).filter(\n    (valueName) =>\n      valueName.optionOne.votes.includes(authedUser) ||\n      valueName.optionTwo.votes.includes(authedUser)\n  )\n\n  const unanswered_questions = Object.values(questions).filter(\n    (valueName) =>\n      !valueName.optionOne.votes.includes(authedUser) &&\n      !valueName.optionTwo.votes.includes(authedUser)\n  )\n  return {\n    unanswered_q: Object.values(unanswered_questions).map((item) => item.id),\n    answered_q: Object.values(answered_questions).map((item) => item.id),\n  }\n}\n\nexport default connect(mapStateToProps)(Dashboard)\n"]},"metadata":{},"sourceType":"module"}