{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/denis/Documents/UDACITY/react-game/src/components/Dashboard.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Question from \"./Question\";\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      show_answered: false\n    };\n\n    this.unanswered = () => {\n      const box2 = document.getElementById(\"box2\");\n      const box1 = document.getElementById(\"box1\");\n      box1.classList.remove(\"shadow\");\n      box2.classList.add(\"shadow\");\n      const action = {\n        show_answered: false\n      };\n      this.change(action);\n    };\n\n    this.answered = () => {\n      const box1 = document.getElementById(\"box1\");\n      const box2 = document.getElementById(\"box2\");\n      box1.classList.add(\"shadow\");\n      box2.classList.remove(\"shadow\");\n      const action = {\n        show_answered: true\n      };\n      this.change(action);\n    };\n\n    this.change = action => {\n      if (this.state.show_answered !== action.show_answered) {\n        this.setState({\n          show_answered: !this.state.show_answered\n        });\n      }\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container_body\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"button_container\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"box2\",\n          className: \"box shadow\",\n          onClick: this.unanswered,\n          children: \"Unanswered Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          id: \"box1\",\n          className: \"box\",\n          onClick: this.answered,\n          children: \"Answered Questions\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 39,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: this.state.show_answered ? \"block\" : \"none\"\n        },\n        children: this.props.answered_q.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"question\",\n          children: /*#__PURE__*/_jsxDEV(Question, {\n            id: id,\n            answered: true\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 46,\n            columnNumber: 15\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 45,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          display: !this.state.show_answered ? \"block\" : \"none\"\n        },\n        children: this.props.unanswered_q.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n          className: \"question\",\n          children: /*#__PURE__*/_jsxDEV(Question, {\n            id: id,\n            answered: false\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 15\n          }, this)\n        }, id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  questions,\n  authedUser,\n  users\n}) {\n  const sorted_bytime_qs = Object.keys(questions).sort((a, b) => questions[b].timestamp - questions[a].timestamp);\n  const unanswered_q = sorted_bytime_qs.filter(valueName => !questions[valueName].optionOne.votes.includes(authedUser) && !questions[valueName].optionTwo.votes.includes(authedUser));\n  const answered_q = sorted_bytime_qs.filter(valueName => questions[valueName].optionOne.votes.includes(authedUser) || questions[valueName].optionTwo.votes.includes(authedUser));\n  return {\n    unanswered_q,\n    answered_q\n  };\n}\n\nexport default connect(mapStateToProps)(Dashboard);","map":{"version":3,"sources":["/Users/denis/Documents/UDACITY/react-game/src/components/Dashboard.js"],"names":["React","Component","connect","Question","Dashboard","state","show_answered","unanswered","box2","document","getElementById","box1","classList","remove","add","action","change","answered","setState","render","display","props","answered_q","map","id","unanswered_q","mapStateToProps","questions","authedUser","users","sorted_bytime_qs","Object","keys","sort","a","b","timestamp","filter","valueName","optionOne","votes","includes","optionTwo"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport Question from \"./Question\"\n\nclass Dashboard extends Component {\n  state = {\n    show_answered: false,\n  }\n\n  unanswered = () => {\n    const box2 = document.getElementById(\"box2\")\n    const box1 = document.getElementById(\"box1\")\n    box1.classList.remove(\"shadow\")\n    box2.classList.add(\"shadow\")\n    const action = { show_answered: false }\n    this.change(action)\n  }\n  answered = () => {\n    const box1 = document.getElementById(\"box1\")\n    const box2 = document.getElementById(\"box2\")\n    box1.classList.add(\"shadow\")\n    box2.classList.remove(\"shadow\")\n    const action = { show_answered: true }\n    this.change(action)\n  }\n\n  change = (action) => {\n    if (this.state.show_answered !== action.show_answered) {\n      this.setState({ show_answered: !this.state.show_answered })\n    }\n  }\n  render() {\n    return (\n      <div className=\"container_body\">\n        <div className=\"button_container\">\n          <button id=\"box2\" className=\"box shadow\" onClick={this.unanswered}>\n            Unanswered Questions\n          </button>\n          <button id=\"box1\" className=\"box\" onClick={this.answered}>\n            Answered Questions\n          </button>\n        </div>\n        <div style={{ display: this.state.show_answered ? \"block\" : \"none\" }}>\n          {this.props.answered_q.map((id) => (\n            <li key={id} className=\"question\">\n              <Question id={id} answered={true}/>\n            </li>\n          ))}\n        </div>\n        <div style={{ display: !this.state.show_answered ? \"block\" : \"none\" }}>\n          {this.props.unanswered_q.map((id) => (\n            <li key={id} className=\"question\">\n              <Question id={id} answered={false} />\n            </li>\n          ))}\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps({ questions, authedUser, users }) {\n  const sorted_bytime_qs = Object.keys(questions).sort(\n    (a, b) => questions[b].timestamp - questions[a].timestamp\n  )\n\n  const unanswered_q = sorted_bytime_qs.filter(\n    (valueName) =>\n      !questions[valueName].optionOne.votes.includes(authedUser) &&\n      !questions[valueName].optionTwo.votes.includes(authedUser)\n  )\n\n  const answered_q = sorted_bytime_qs.filter(\n    (valueName) =>\n      questions[valueName].optionOne.votes.includes(authedUser) ||\n      questions[valueName].optionTwo.votes.includes(authedUser)\n  )\n  return {\n    unanswered_q,\n    answered_q,\n  }\n}\n\nexport default connect(mapStateToProps)(Dashboard)\n"]},"metadata":{},"sourceType":"module"}