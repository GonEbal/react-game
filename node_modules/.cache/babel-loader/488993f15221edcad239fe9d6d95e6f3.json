{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/denis/Documents/UDACITY/react-game/src/components/Dashboard.js\";\nimport React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport Question from \"./Question\";\n\nclass Dashboard extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.unanswered = () => {\n      const container = document.getElementById(\"container_list\");\n      container.classList.add(\"right-panel-active\");\n    };\n\n    this.answered = () => {\n      const container = document.getElementById(\"container_list\");\n      container.classList.remove(\"right-panel-active\");\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container_body\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"container_list\",\n        id: \"container_list\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-container_list unanswered-container_list questions_list\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Unanswered\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 19,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"dashboard-list\",\n            children: this.props.unanswered_q.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"question\",\n              children: /*#__PURE__*/_jsxDEV(Question, {\n                id: id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 23,\n                columnNumber: 19\n              }, this)\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 22,\n              columnNumber: 17\n            }, this))\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 20,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 18,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"form-container_list answered-container_list questions_list\",\n          children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Answered\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 29,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n            className: \"dashboard-list\",\n            children: [this.props.answered_q.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"question\",\n              children: /*#__PURE__*/_jsxDEV(Question, {\n                id: id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 33,\n                columnNumber: 19\n              }, this)\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 32,\n              columnNumber: 17\n            }, this)), this.props.answered_q.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"question\",\n              children: /*#__PURE__*/_jsxDEV(Question, {\n                id: id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 38,\n                columnNumber: 19\n              }, this)\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 37,\n              columnNumber: 17\n            }, this)), this.props.answered_q.map(id => /*#__PURE__*/_jsxDEV(\"li\", {\n              className: \"question\",\n              children: /*#__PURE__*/_jsxDEV(Question, {\n                id: id\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 43,\n                columnNumber: 19\n              }, this)\n            }, id, false, {\n              fileName: _jsxFileName,\n              lineNumber: 42,\n              columnNumber: 17\n            }, this))]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"overlay-container_list\",\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"overlay\",\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-panel overlay-left\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Don't feel to answer?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 51,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Wanna see answered questions?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 52,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"ghost\",\n                id: \"signIn\",\n                onClick: this.answered,\n                children: \"View Answered\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 53,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 50,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"overlay-panel overlay-right\",\n              children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n                children: \"Want more questions?\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 58,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                children: \"Check out all questions\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n                className: \"ghost\",\n                id: \"signUp\",\n                onClick: this.unanswered,\n                children: \"View\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 60,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 49,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nfunction mapStateToProps({\n  questions,\n  authedUser,\n  users\n}) {\n  const answered_questions = Object.values(questions).filter(valueName => valueName.optionOne.votes.includes(authedUser) || valueName.optionTwo.votes.includes(authedUser));\n  const unanswered_questions = Object.values(questions).filter(valueName => !valueName.optionOne.votes.includes(authedUser) && !valueName.optionTwo.votes.includes(authedUser));\n  return {\n    unanswered_q: Object.values(unanswered_questions).map(item => item.id),\n    answered_q: Object.values(answered_questions).map(item => item.id)\n  };\n}\n\nexport default connect(mapStateToProps)(Dashboard);","map":{"version":3,"sources":["/Users/denis/Documents/UDACITY/react-game/src/components/Dashboard.js"],"names":["React","Component","connect","Question","Dashboard","unanswered","container","document","getElementById","classList","add","answered","remove","render","props","unanswered_q","map","id","answered_q","mapStateToProps","questions","authedUser","users","answered_questions","Object","values","filter","valueName","optionOne","votes","includes","optionTwo","unanswered_questions","item"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport { connect } from \"react-redux\"\nimport Question from \"./Question\"\n\nclass Dashboard extends Component {\n  unanswered = () => {\n    const container = document.getElementById(\"container_list\")\n    container.classList.add(\"right-panel-active\")\n  }\n  answered = () => {\n    const container = document.getElementById(\"container_list\")\n    container.classList.remove(\"right-panel-active\")\n  }\n  render() {\n    return (\n      <div className=\"container_body\">\n        <div className=\"container_list\" id=\"container_list\">\n          <div className=\"form-container_list unanswered-container_list questions_list\">\n            <h1>Unanswered</h1>\n            <ul className=\"dashboard-list\">\n              {this.props.unanswered_q.map((id) => (\n                <li key={id} className=\"question\">\n                  <Question id={id} />\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"form-container_list answered-container_list questions_list\">\n            <h1>Answered</h1>\n            <ul className=\"dashboard-list\">\n              {this.props.answered_q.map((id) => (\n                <li key={id} className=\"question\">\n                  <Question id={id} />\n                </li>\n              ))}\n              {this.props.answered_q.map((id) => (\n                <li key={id} className=\"question\">\n                  <Question id={id} />\n                </li>\n              ))}\n              {this.props.answered_q.map((id) => (\n                <li key={id} className=\"question\">\n                  <Question id={id} />\n                </li>\n              ))}\n            </ul>\n          </div>\n          <div className=\"overlay-container_list\">\n            <div className=\"overlay\">\n              <div className=\"overlay-panel overlay-left\">\n                <h1>Don't feel to answer?</h1>\n                <p>Wanna see answered questions?</p>\n                <button className=\"ghost\" id=\"signIn\" onClick={this.answered}>\n                  View Answered\n                </button>\n              </div>\n              <div className=\"overlay-panel overlay-right\">\n                <h1>Want more questions?</h1>\n                <p>Check out all questions</p>\n                <button className=\"ghost\" id=\"signUp\" onClick={this.unanswered}>\n                  View\n                </button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n  }\n}\n\nfunction mapStateToProps({ questions, authedUser, users }) {\n  const answered_questions = Object.values(questions).filter(\n    (valueName) =>\n      valueName.optionOne.votes.includes(authedUser) ||\n      valueName.optionTwo.votes.includes(authedUser)\n  )\n\n  const unanswered_questions = Object.values(questions).filter(\n    (valueName) =>\n      !valueName.optionOne.votes.includes(authedUser) &&\n      !valueName.optionTwo.votes.includes(authedUser)\n  )\n  return {\n    unanswered_q: Object.values(unanswered_questions).map((item) => item.id),\n    answered_q: Object.values(answered_questions).map((item) => item.id),\n  }\n}\n\nexport default connect(mapStateToProps)(Dashboard)\n"]},"metadata":{},"sourceType":"module"}